name: Jekyll Build with Dockerfile

on:
  workflow_call:
    inputs:
      dockerfile:
        description: 'Name of the Dockerfile to use'
        required: false
        default: 'Dockerfile'
        type: string
    secrets:
      READY_PUSHER:
        description: 'GitHub token for CLI operations'
        required: true

jobs:
  restore:
    name: Restore artifact
    runs-on: ubuntu-latest
    permissions:
      statuses: write
    outputs:
      artifact-found: ${{ steps.restore-step.outputs.artifact-found }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
         
      - name: Restore if artifact exists
        id: restore-step
        env:
           GH_TOKEN: ${{ secrets.READY_PUSHER }}
        run: |
          set -x
          set +e
          gh run download -R ${{ github.repository }} -D _site -n jekyll-site-${{ github.sha }}
          result=$?
          set -e
          if [ $result -eq 0 ]; then
            echo "artifact-found=true" >> $GITHUB_OUTPUT
            echo "Restored Jekyll _site" artifact using 'jekyll-site-${{ github.sha }}' >> $GITHUB_STEP_SUMMARY
            ls -a _site         
          else
            echo "artifact-found=false" >> $GITHUB_OUTPUT
            echo "No Jekyll _site artifact found for 'jekyll-site-${{ github.sha }}' - will build from scratch" >> $GITHUB_STEP_SUMMARY
          fi
          exit 0

  build-image:
    name: Build and cache Docker image
    runs-on: ubuntu-latest
    needs: restore
    if: needs.restore.outputs.artifact-found != 'true'
    permissions:
      packages: write
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      dockerfile-hash: ${{ steps.dockerfile-hash.outputs.hash }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Calculate Dockerfile hash
        id: dockerfile-hash
        run: |
          # Create a hash based on the specified Dockerfile content and Gemfile.lock
          if [ ! -f "${{ inputs.dockerfile }}" ]; then
            echo "❌ Dockerfile not found: ${{ inputs.dockerfile }}"
            exit 1
          fi
          
          # Always include Dockerfile, add Gemfile.lock if it exists
          HASH_INPUT=$(cat "${{ inputs.dockerfile }}")
          if [ -f "Gemfile.lock" ]; then
            HASH_INPUT="${HASH_INPUT}$(cat Gemfile.lock)"
            echo "Calculating hash from '${{ inputs.dockerfile }}' + Gemfile.lock" >> $GITHUB_STEP_SUMMARY
          else
            echo "Calculating hash from '${{ inputs.dockerfile }}' only (no Gemfile.lock found)" >> $GITHUB_STEP_SUMMARY
          fi
          
          DOCKERFILE_HASH=$(echo "$HASH_INPUT" | sha256sum | cut -d' ' -f1 | head -c 12)
          echo "hash=${DOCKERFILE_HASH}" >> $GITHUB_OUTPUT
          echo "Hash: ${DOCKERFILE_HASH}" >> $GITHUB_STEP_SUMMARY

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}/jekyll-build
          tags: |
            type=raw,value=dockerfile-${{ steps.dockerfile-hash.outputs.hash }}
            type=raw,value=latest

      - name: Check if image exists
        id: check-image
        run: |
          IMAGE_TAG="ghcr.io/${{ github.repository }}/jekyll-build:dockerfile-${{ steps.dockerfile-hash.outputs.hash }}"
          if docker manifest inspect "$IMAGE_TAG" > /dev/null 2>&1; then
            echo "exists=true" >> $GITHUB_OUTPUT
            echo "✅ Image already exists: $IMAGE_TAG" >> $GITHUB_STEP_SUMMARY
          else
            echo "exists=false" >> $GITHUB_OUTPUT
            echo "🔨 Need to build new image: $IMAGE_TAG" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Set up Docker Buildx
        if: steps.check-image.outputs.exists != 'true'
        uses: docker/setup-buildx-action@v3

      - name: Build and push Docker image
        if: steps.check-image.outputs.exists != 'true'
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ${{ inputs.dockerfile }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  build:
    if: needs.restore.outputs.artifact-found != 'true'
    needs: [restore, build-image]
    name: Build Jekyll Site (Custom Dockerfile)
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/${{ github.repository }}/jekyll-build:dockerfile-${{ needs.build-image.outputs.dockerfile-hash }}
      credentials:
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    permissions:
      statuses: write
      packages: read

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Pages
        id: pages
        uses: actions/configure-pages@v4    

      - name: Install gh dependencies
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh extension install thetechcollective/gh-set-status --pin stable        
          
      - name: Build with Jekyll
        id: jekyll-build
        env:
          JEKYLL_ENV: production
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}        
        run: |
          IMAGE_TAG="ghcr.io/${{ github.repository }}/jekyll-build:dockerfile-${{ needs.build-image.outputs.dockerfile-hash }}"
          echo "Using cached image: $IMAGE_TAG" >> $GITHUB_STEP_SUMMARY          

          # Build Jekyll directly in the container
          bundle config set path "/usr/local/bundle"
          bundle config set frozen true
          bundle install
          bundle exec jekyll build --baseurl "${{ steps.pages.outputs.base_path }}"
          result=$?
          
          if [ $result -eq 0 ]; then
            echo "Built site with Jekyll for SHA ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
            echo "Base URL: '${{ steps.pages.outputs.base_path }}'" >> $GITHUB_STEP_SUMMARY
            echo "Jekyll Environment: '${JEKYLL_ENV}'" >> $GITHUB_STEP_SUMMARY
            echo "Build Environment: Cached Dockerfile ($IMAGE_TAG)" >> $GITHUB_STEP_SUMMARY
            gh set-status success "Jekyll build completed successfully"
          else
            echo "Jekyll build failed" >> $GITHUB_STEP_SUMMARY
            gh set-status failure "Jekyll build failed"
          fi
          exit $result
 
      - name: Upload reusable artifact
        env:
          GH_TOKEN: ${{ secrets.READY_PUSHER }}
        uses: actions/upload-artifact@v4
        with:
          name: jekyll-site-${{ github.sha }}
          path: ./_site
          retention-days: 3
