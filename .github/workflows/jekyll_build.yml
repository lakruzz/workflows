name: Jekyll Build

on:
  workflow_call:
    inputs:
      build_environment:
        description: 'Build environment to use (ubuntu-latest or ruby-bookworm)'
        required: false
        default: 'ruby-bookworm'
        type: string

permissions:
  contents: read

jobs:
  validate:
    name: Validate inputs
    runs-on: ubuntu-latest
    steps:
      - name: Validate build_environment input
        run: |
          if [[ "${{ inputs.build_environment }}" != "ubuntu-latest" && "${{ inputs.build_environment }}" != "ruby-bookworm" ]]; then
            echo "❌ Invalid build_environment: '${{ inputs.build_environment }}'"
            echo "Valid options are: 'ubuntu-latest' or 'ruby-bookworm'"
            echo "Default is: 'ruby-bookworm'"
            exit 1
          else
            echo "✅ Valid build_environment: '${{ inputs.build_environment }}'"
          fi

  restore:
    name: Restore artifact
    runs-on: ubuntu-latest
    needs: validate
    permissions:
      statuses: write
    outputs:
      artifact-found: ${{ steps.restore-step.outputs.artifact-found }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }} 

      - name: Restore if artifact exists
        id: restore-step
        env:
           GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -x
          set +e
          gh run download -R ${{ github.repository }} -D _site -n jekyll-site-${{ github.sha }}
          result=$?
          set -e
          if [ $result -eq 0 ]; then
            echo "artifact-found=true" >> $GITHUB_OUTPUT
            echo "Restored Jekyll _site" artifact using 'jekyll-site-${{ github.sha }}' >> $GITHUB_STEP_SUMMARY
            ls -a _site         
          else
            echo "artifact-found=false" >> $GITHUB_OUTPUT
            echo "No Jekyll _site artifact found for 'jekyll-site-${{ github.sha }}' - will build from scratch" >> $GITHUB_STEP_SUMMARY
          fi
          exit 0

  build:
    if: needs.restore.outputs.artifact-found != 'true'
    needs: [validate, restore]
    name: Build Jekyll Site (${{ inputs.build_environment == 'ubuntu-latest' && 'Ubuntu Latest' || 'Ruby Bookworm' }})
    runs-on: ubuntu-latest
    container: ${{ inputs.build_environment == 'ruby-bookworm' && 'ruby:3.3.0-bookworm' || '' }}
    permissions:
      statuses: write

    steps:
      - name: Checkout
        uses: actions/checkout@v4
                         
      - name: Install imagemagick (Ubuntu)
        if: inputs.build_environment == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y imagemagick libmagickwand-dev

      - name: Install bundler (Ubuntu)
        if: inputs.build_environment == 'ubuntu-latest'
        run: |
          echo 'export PATH="$HOME/.local/share/gem/ruby/3.2.0/bin:$PATH"' >> $GITHUB_ENV
          export PATH="$HOME/.local/share/gem/ruby/3.2.0/bin:$PATH"
          gem install bundler --user-install

      - name: Install curl (Ruby Bookworm)
        if: inputs.build_environment == 'ruby-bookworm'
        run: |
          apt-get update
          apt-get install -y git curl

      - name: Install GitHub CLI (Ruby Bookworm)
        if: inputs.build_environment == 'ruby-bookworm'
        run: |
          curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg
          chmod go+r /usr/share/keyrings/githubcli-archive-keyring.gpg
          echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | tee /etc/apt/sources.list.d/github-cli.list > /dev/null
          apt-get update
          apt-get install gh -y

      - name: Install gh dependencies
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh extension install thetechcollective/gh-set-status --pin stable          

      - name: Setup Pages
        id: pages
        uses: actions/configure-pages@v4    
          
      - name: Build with Jekyll
        id: jekyll-build
        env:
          JEKYLL_ENV: production
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}        
        run: |
          if [ "${{ inputs.build_environment }}" = "ubuntu-latest" ]; then
            export PATH="$HOME/.local/share/gem/ruby/3.2.0/bin:$PATH"
          fi
          bundle config set --local path 'vendor/bundle'
          bundle config set frozen true
          bundle install
          set +e
          bundle exec jekyll build --baseurl "${{ steps.pages.outputs.base_path }}"
          result=$?
          set -e
          if [ $result -eq 0 ]; then
            echo "Built site with Jekyll for SHA ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
            echo "Base URL: '${{ steps.pages.outputs.base_path }}'" >> $GITHUB_STEP_SUMMARY
            echo "Jekyll Environment: '${JEKYLL_ENV}'" >> $GITHUB_STEP_SUMMARY
            if [ "${{ inputs.build_environment }}" = "ubuntu-latest" ]; then
              echo "Build Environment: Ubuntu Latest" >> $GITHUB_STEP_SUMMARY
            else
              echo "Build Environment: Ruby Bookworm container" >> $GITHUB_STEP_SUMMARY
            fi
            gh set-status success "All spelling checks passed"
          else
            echo "Jekyll build failed" >> $GITHUB_STEP_SUMMARY
            gh set-status failure "Jekyll build failed"
          fi
          exit $result
 
      - name: Upload reusable artifact
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        uses: actions/upload-artifact@v4
        with:
          name: jekyll-site-${{ github.sha }}
          path: ./_site
          retention-days: 3



